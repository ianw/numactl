.\" Copyright (c) 2005 Silicon Graphics Incorporated.
.\" Christoph Lameter, <clameter@sgi.com>.
.\"
.TH NUMA_MAPS 5 "06 March 2006" "Linux 2.6" "Linux Programmer's Manual"
.SH NAME
numa_maps \- information about a process' numa memory policy and allocation
.SH DESCRIPTION
The file
.B /proc/<pid>/numa_maps
contains information about each memory range used by a given process,
displaying--among other information--the effective memory policy for
that memory range and on which nodes the pages have been allocated.

.B numa_maps
is a read-only file.
When
.B /proc/<pid>/numa_maps
is read, the kernel will scan the virtual address space of the specified
process and report how memory is used.  One line is displayed for each
unique memory range of the process.
.P
The first field of each line shows the starting address of the memory range.
This field allows a correlation with contents of the
.B /proc/<pid>/maps
file which contains the end address of the range and other information,
such as the access permissions and sharing.
.P
The second field shows the memory policy currently in effect for the
memory range.
Note that the effective policy is not necessarily the policy installed by the
process for that memory range.
Specifically, if the process installed a "default" policy for that range, the
effective policy for that range will be the task policy which may or may not
be "default".
.P
The rest of the line contains information about the pages allocated in
the memory range.
.DT
.SS Possible information items
.TP 1.5i
.I N<node>=<nr_pages>
The number of pages allocated on
.IR <node> .
.I <nr_pages>
includes only pages currently mapped by the process.
Page migration and memory reclaim may have temporarily unmapped pages
associated with this memory range.
These pages may only show up again after the process has attempted to reference
them.
If the memory range represents a shared memory area or file mapping,
other processes may currently have additional pages mapped in a
corresponding memory range.
.TP 1.5i
.I file=<filename>
The file backing the memory range.
If the file is mapped as private, write accesses may have generated
COW (Copy-On-Write) pages in this memory range.
These pages are displayed as anonymous pages.
.TP 1.5i
.I heap
Memory range is used for the heap.
.TP 1.5i
.I stack
Memory range is used for the stack.
.TP 1.5i
.I huge
Huge memory range.
The page counts shown are huge pages and not regular sized pages.
.TP 1.5i
.I anon=<pages>
The number of anonymous page in the range.
.TP 1.5i
.I dirty=<pages>
Number of dirty pages
.TP 1.5i
.I mapped=<pages>
Total number of mapped pages, if different from
.IR dirty and
.I anon
pages.
.TP 1.5i
.I mapmax=<count>
Maximum mapcount (number of processes mapping a single page) encountered
during the scan.
This may be used as an indicator of the degree sharing occuring in a
given memory range.
.TP 1.5i
.I swapcache=<count>
Number of pages that have an associated entry on a swap device.
.TP 1.5i
.I active=<pages>
The number of pages on the active list.
This field is only shown if different from the number of pages in this range.
This means that some inactive pages exist in the memory range that may be
removed from memory by the swapper soon.
.TP 1.5i
.I writeback=<pages>
Number of pages that are currently being written out to disk.
.SH FILES
.IR /proc/<pid>/numa_maps ,
.IR /proc/<pid>/maps .
.SH "SEE ALSO"
.BR set_mempolicy (2),
.BR mbind (2),
.BR migratepages (8),
.BR numactl (8),
.BR cpuset (8).

